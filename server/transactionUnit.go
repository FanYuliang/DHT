// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package server

import "sync"

//cat generic_ccmap.go | genny gen "Key=string TransactionUnit=*blockchain.Transaction" > [targetName].go

// TransactionUnitList the set of Items
type TransactionUnitList struct {
	items []transactionUnit
	lock  sync.RWMutex
}

// Set adds a new item to the tail of the list
func (d *TransactionUnitList) Append(v transactionUnit) {
	d.lock.Lock()
	defer d.lock.Unlock()
	if d.items == nil {
		d.items = make([]transactionUnit, 1)
	}
	d.items = append(d.items, v)
}

// GetTransactionToCommit front
func (d *TransactionUnitList) Pop(n int) []transactionUnit {
	d.lock.Lock()
	defer d.lock.Unlock()
	var res []transactionUnit
	if n < len(d.items) {
		res = d.items[:n]
		d.items = d.items[n:]
	} else {
		res = d.items
		d.items = make([]transactionUnit, 1)
	}
	return res
}

func (d *TransactionUnitList) Size() int {
	d.lock.RLock()
	defer d.lock.RUnlock()
	return len(d.items)
}

func (d* TransactionUnitList) Get(idx int) *transactionUnit {
	d.lock.RLock()
	defer d.lock.RUnlock()
	if idx > len(d.items){
		return nil
	}
	return &d.items[idx]
}